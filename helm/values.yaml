# Default values for kubewatcher.

handlers:
  log: {}
#  telegram:
#    token: $TELEGRAM_HANDLER_API_TOKEN
#    chatId: $TELEGRAM_HANDLER_CHAT_ID
#  slack:
#    channel: "${SLACK_HANDLER_CHANNEL}"
#    token: $SLACK_HANDLER_TOKEN
#    username: KubeWatcher-dev
#    icon: https://github.com/tonsV2/kubewatcher/raw/master/icons/icon.png
#  smtp:
#    from: $SMTP_HANDLER_FROM
#    password: $SMTP_HANDLER_PASSWORD
#    host: smtp.gmail.com
#    port: 587
#    tls: true
#    to:
#      - $SMTP_HANDLER_TO

# Values declared under env will be converted to properties of a secret and exported as environment variables
# TODO: For some reason the SLACK_HANDLER_CHANNEL variable won't be interpolated if the value begins with '#'
#  The current solution is simply to specify the channel without the '#' prefix
#env:
#  SLACK_HANDLER_CHANNEL: "channel"
#  SLACK_HANDLER_TOKEN: "xoxb-blabla..."
#  TELEGRAM_HANDLER_API_TOKEN: 1234...
#  TELEGRAM_HANDLER_CHAT_ID: 4321...

filters:
  - kind: Node
    apiVersion: v1
    conditions:
      - status.conditions[type == DiskPressure][status == True]
    message:
      template: "Node: {NAME} has disk pressure"
      attributes:
        NAME: metadata.name
    tests: [ tests/data/node-DiskPressure.yaml ]

  - kind: Node
    apiVersion: v1
    conditions:
      - status.conditions[type == MemoryPressure][status == True]
    message:
      template: "Node: {NAME} has memory pressure"
      attributes:
        NAME: metadata.name
    tests: [ tests/data/node-MemoryPressure.yaml ]

  - kind: Node
    apiVersion: v1
    conditions:
      - status.conditions[type == PIDPressure][status == True]
    message:
      template: "Node: {NAME} has PID pressure"
      attributes:
        NAME: metadata.name
    tests: [ tests/data/node-PIDPressure.yaml ]

  - kind: Pod
    apiVersion: v1
    #    namespaces:
    #      include:
    #        - surf-screenshotter-dev
    #      ignore:
    #        - heptio-sonobuoy
    conditions:
      - status.containerStatuses.*.state.terminated[exitCode != 0]
    message:
      template: "Pod: {NAME} in {NAMESPACE} terminated with nonzero exit code"
      attributes:
        NAME: metadata.name
        NAMESPACE: metadata.namespace
    tests:
      - tests/data/pod-non-zero-exit-code.yaml

  - kind: Pod
    apiVersion: v1
    conditions:
      - status.containerStatuses[restartCount > 10]
    message:
      template: "Pod: {NAME} in {NAMESPACE} has restarted {RESTART_COUNT} times"
      attributes:
        NAME: metadata.name
        NAMESPACE: metadata.namespace
        RESTART_COUNT: status.containerStatuses[restartCount > 10].restartCount
    tests: [ tests/data/pod-restarted.yaml ]

  - kind: Event
    apiVersion: v1
    conditions:
      - '[type == Warning]'
    #      - [reason != ImageGCFailed]
    #      - [reason != FreeDiskSpaceFailed]
    message:
      template: "Event: Warning {NAME} in {NAMESPACE} (reason: {REASON}, message: {MESSAGE})"
      attributes:
        NAME: metadata.name
        NAMESPACE: metadata.namespace
        REASON: reason
        MESSAGE: message
    tests:
      - tests/data/event-fail-BackOff.yaml
      - tests/data/event-warning.yaml

  - kind: Job
    apiVersion: batch/v1
    conditions:
      - status.conditions[type == Failed]
    message:
      template: "Job: {NAME} in {NAMESPACE} failed (reason: {REASON}, message: {MESSAGE})"
      attributes:
        NAME: metadata.name
        NAMESPACE: metadata.namespace
        REASON: status.conditions[type == Failed].reason
        MESSAGE: status.conditions[type == Failed].message
    tests: [ tests/data/job-failed.yaml ]

skipRole: false

image:
  repository: tons/kubewatcher:1.7.1
  pullPolicy: IfNotPresent

imagePullSecrets: []
nameOverride: ""
fullnameOverride: ""

serviceAccount:
  # Specifies whether a service account should be created
  create: true
  # Annotations to add to the service account
  annotations: {}
  # The name of the service account to use.
  # If not set and create is true, a name is generated using the fullname template
  name: ""

podAnnotations: {}

podSecurityContext: {}
  # fsGroup: 2000

securityContext: {}
  # capabilities:
  #   drop:
  #   - ALL
  # readOnlyRootFilesystem: true
  # runAsNonRoot: true
  # runAsUser: 1000

resources: {}
  # We usually recommend not to specify default resources and to leave this as a conscious
  # choice for the user. This also increases chances charts run on environments with little
  # resources, such as Minikube. If you do want to specify resources, uncomment the following
  # lines, adjust them as necessary, and remove the curly braces after 'resources:'.
  # limits:
  #   cpu: 100m
  #   memory: 128Mi
  # requests:
  #   cpu: 100m
  #   memory: 128Mi

nodeSelector: {}

tolerations: []

affinity: {}
